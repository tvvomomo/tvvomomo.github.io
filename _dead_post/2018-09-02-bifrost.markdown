---
layout: post
title:  "数据配送系统的改造"
date:   2018-09-02 17:57:00
categories: Design
tags: design, select, user-interface
image: /images/bifrost.png
---

数据配送系统是公司运维部一个数据传输的系统，用于将代码、配置文件、大文件等不同类型的数据，以高效、稳定、多样化的方式传输至指定目标机器的系统。

其模型可以归纳为 4 个基本元素：

* 数据密钥 - 确认一次配送任务是否有权限可以进行，主要针对数据源、目标、行为人进行判权，从而决定此次任务是否可以执行。
* 配送目标 - 确定目标机器以及目的路径，以及配送的多样化方式，如配送速度、超时需执行的动作。
* 数据源 - 确定需要配送的数据，可以是代码地址，也可以是物理机某个目录下的所有数据。
* 作业 - 指选定某个数据源后，选择配送目标触发配送任务后，产生的一次日志信息。

此次针对数据配送系统的改版的核心，就是对这 4 个基本元素的确立。原有的配送系统，是以指令思维来确定的前台产品的设计思路，所以存在指向不明的问题。

原有的数据配送系统，对核心元素的划分为：

* 数据源 - 确认一次配送动作是否有权限可以进行，主要针对传输对象、传输目标、行为人进行判权，从而决定此次动作是否可以执行。
* 配送任务 - 确定目标机器以及目的路径，以及配送的多样化方式，如配送速度、超时需执行的动作。也指触发的一系列配送动作执行日志的集合。
* 触发配送 - 确定需要配送的数据，可以是代码地址，也可以是物理机某个目录下的所有数据。并且选择配送任务来触发某次触发动作。也指代此次的触发动作的记录。

在此基础之上，我们针对系统的优化点有：

* 在产品设计中，融入产品使用流程
* 对复杂配置的极简化
* 将一个对象的衍生信息，归置在同一个页面内

## 在产品设计中，融入产品使用流程

在原有的产品设计中，触发一次配送动作，需要在 3 个一级导航中进行切换。分别创建 3 个实体，方能完成任务。

![](/images/bifrost-old-process.png)

根据实际的调研，我们发现：

* 数据密钥（原数据源）是一个对于前台产品用户来说，使用频率较低的对象。
* 之所以需要割裂开 3 个动作是因为：
    * 创建配送目标（原配送任务）是因为目标对于一个用户来说，相对不变，并且用户可以设置诸多策略。
    * 触发配送需要指定数据源，来激活一次配送动作；而一个数据源可能需要被配送至多个目标。
    * 数据密钥（原数据源）对于命令行用户来说，是一个独立的对象。他们仅需要创建密钥，就可以在命令行工具中，通过指令触发配送。
* 新手用户很难通过文档来了解产品的使用流程。

所以，我们通过以下手段来重新设计这个系统。

### 将数据密钥列表改成了横向排列

![](/images/bifrost-head.png)

既然选择数据密钥对于前台用户来说，是一个低频操作，所以我们可以利用类似 Tab 页的方式，对数据密钥进行展现。

而切换数据密钥相对低频。大部分的用户的数据密钥不会超过 5 个，所以之前独立页面对密钥进行表格展现的方式，过于浪费空间；也造成了和数据源、配送目标割裂的状况。

### 从原配送任务中拆分出数据源的概念

![](/images/bifrost-data-source.png)

为了能够在一个页面中体现出：选择一个起始点、再选择一个目的地，触发一次动作，这样的自然流程；我们就必须修改原有触发动作时才设置起始点的交互。

因此我们将数据源从原先的触发配送这个概念中剥离出来。用户可以设置若干个数据源，可以是代码地址，也可以是某个物理机下的文件路径。设置后供以后触发配送作业用。

### 通过直观的界面提示用户操作流程

![](/images/bifrost-new-process.png)

将数据源剥离出来后，用户可以直接通过点选数据源后，通过遮罩的反馈来告知用户后续动作应该是：

* 您需要选择一个配送目标
* 您需要给这次配送作业备注一下

如果一次触发成功了，那么下方的历史作业中，会出现一条新的记录。

![](/images/bifrost-logs.png)

除此之外，我们还针对新手用户，在完全没有数据密钥、数据源、配送目标的前提下，来新建一次触发配送（新建作业）的功能。

![](/images/bifrost-create-log.png)

## 对复杂配置的极简化

原来创建一个配送目标（原配送任务），需要填入巨量的信息。而一些非必填项，以及一些非常规配置，混杂在其中，让学习成本变得很高，信息没有按照优先级进行展现。

![](/images/bifrost-old-input.png)

在新改版后的新增配送目标功能，我们通过以下手段，将用户必须参与的输入从 14 个降低到了 7 个：

* 分步进行配置 - 让海量信息不要集中进行展现
* 必填和必须了解的配置才进行展现
* 非必须了解的配置进行折叠

![](/images/bifrost-new-input.png)

如果一个配置不是必须了解的，那它将有 3 个状态：

![](/images/bifrost-input-status.png)

* 默认状态 - 隐藏非必须了解的配置
* 显示状态 - 查看默认配置
* 设置状态 - 进行细节配置的调整

## 将一个对象的衍生信息，归置在同一个页面内

原有的配送目标（原配送任务）是在一个列表中进行查看，需要用户点击：

* 点击 查看配送策略
* 点击 最新配送
* 点击 查看配送历史

分别进入到 3 个新的页面，才能了解到这个配送目标的全貌。

![](/images/bifrost-log-detail.png)

在新版的配送目标，我们将这些信息放到了一个页面中，通过 Tab 来进行区隔。

![](/images/bifrost-log-details.png)

并且加上了针对该配送目标的一些操作，如编辑策略、删除目标等。

这样避免用户在浏览器中打开诸多标签页，并在其中来回切换才能完成任务的缺点。而原有系统的 HEAD 标签并未进行细粒度的设计，所以用户也难以找到自己想要的页面。

归置在同一个页面，不仅可以对一个对象有更加全面的了解；对于查找一个对象的附属内容，或者对一个对象进行的一系列操作，也变得简单。

## 总结

原有的配送系统的主要问题就在于对于一些概念的处理，如配送任务既指一次配送任务记录，也代表一种配送目标策略；而与之平级的配送触发，指一次触发动作，也指对数据源的配置。

虽然这个与配送系统的指令的概念一一对应，但是不太符合常规思考。如果一个词语即属于名词也属于动词，那么在此基础之上做的交互模型，很难让人理解。

在新版的配送系统中，新建作业这样的分步长流程操作，以及对一些非必须配置的隐藏，也颇受争议。

分步的表单输入，其实本质上并没有减少信息的输入。而一次长时间的信息输入，若要对之前信息输入的回顾，在分布的设计下，变得异常困难。

非必须配置的隐藏，会造成在某些场景下，一些因小失大的状况发生。但是舍本琢末的原设计，也是非改不可了。

之后会根据用户对新版的使用感受反馈，做一个长时间的考察。再决定设计是否合理，有无提升的空间。对于一个有固定用户、较长使用周期的系统进行大面积的改版，会存在一个 gap 期。这个期间用户反对声音会很大。在声音中分辨出有价值的信息也是一个考验情商的事情。

## 彩蛋

除了上面提到的改版，正在实现的设计还有，输入项和命令行的对应关系。我们为了让命令行用户逐步转化为前台用户；也为了让前台用户对数据配送系统的原理有所了解，我们做了下面的提示设计。

![](/images/bifrost-command.png)

如果表单输入聚焦至源文件路径，右边的指令参照说明该输入对应到命令中的什么地方。